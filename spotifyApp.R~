library(RCurl)
library(jsonlite)
require(igraph)
require(GGally)

#If you don't get the name of the band exactly correct, it'll just use the hgihest popularity band. This is an obvious bug.
#Network is directed. I either ignore this, or make it a directed graph


getRelated=function(artistName){
  info=fromJSON(getURL(paste("https://api.spotify.com/v1/search?q=", gsub(' ', '+', artistName),"&type=artist", sep='')))$artists$items
  name=info$name[1]
  id=unlist(strsplit(info$uri[1],':'))[3]

  #Then it finds related artists
  site=paste("https://api.spotify.com/v1/artists/",id,"/related-artists", sep='')
  
  relArtists=as.data.frame(fromJSON(getURL(site, httpheader = c(Accept = "application/json"))))
  relatedName=relArtists[,7]
  relatedID= matrix(unlist(strsplit(relArtists[,10], ":")), byrow=TRUE,ncol=3)[,3]
  return(data.frame(sourceID=id, sourceName=name, names=relatedName, id=relatedID))
}




getPath=function(startNode, steps=100){
  flag=0
  branch=getRelated(startNode)
  edge=data.frame(sourceID=branch[,'sourceName'], id=branch[,'names'])
  nodes=branch[,'names']
 
 while(flag < steps){
    for(i in 1:length(nodes)){
      temp=getRelated(nodes[i])
      newleaf=data.frame(sourceID=temp[,'sourceName'], id=temp[,'names'])
      edge=rbind(edge, newleaf[-which(newleaf[,'id'] %in% edge[,'sourceID']),])  
     }
    toss=which(newleaf[,'id'] %in% edge[,'sourceID'])
    if(length(toss)>1){newnodes=newleaf[-which(newleaf[,'id'] %in% edge[,'sourceID']), 'id']}else{newnodes=newleaf[,'id']}
    nodes=newnodes
  #if(any(edge[,2]==endNode)){flag=FALSE}
  flag=flag+1
  print(flag)
  }
  network=graph.edgelist(as.matrix(edge))
  return(network)
}







getYourNetwork=function(bands){
   start=getRelated(bands[1])
   for(i in 2:length(bands)){
      temp=getRelated(bands[i])
      start=rbind(start, temp)
   }
   edge=start[, c('sourceName', 'names')]
   
   end=getRelated(edge[1,2])
   end=end[which(end[,'names'] %in% edge[,2]),]
   for(i in 2:length(edge[,2])){
     temptemp=getRelated(edge[i,2])
     cutdown=temptemp[which(temptemp[,'names'] %in% edge[,2]),]
     end=rbind(end, cutdown)
   }
   edge1=end[,c('sourceName', 'names')]
   return(rbind(edge, edge1))
}




bands=c('The Hold Steady', 'Andrew Jackson Jihad')
test=getYourNetwork(bands)

a=d3SimpleNetwork(test, textColour="black", linkColour='green', nodeColour='blue', charge=-500, fontsize=20, linkDistance=100, width=1200, height=1000, file="tad.html", opacity=0.3)













SevEdge=sevilleta[[4]][,1:3]
SevEdge[,1]=rownames(sevilleta[[1]])[SevEdge[,1]]
SevEdge[,2]=colnames(sevilleta[[1]])[SevEdge[,2]]
SevEdge=SevEdge[-which(SevEdge[,3]==0),]


d3SimpleNetwork(SevEdge[,1:2],textColour="black", linkColour='black', nodeColour='blue', charge=-300, linkDistance=100, width=1200, height=1000, fontsize=0, , file="sevilleta.html", opacity=0.5)


sevnames=c(rownames(sevilleta[[1]]), as.character(sevilleta[[3]][,1]))
sevgroup=c(rep(1,length(rownames(sevilleta[[2]]))), rep(2, nrow(sevilleta[[3]])))
SevNodes=data.frame(name = sevnames, group = sevgroup)

SevEdge=data.frame(SevEdge)
SevLinks=SevEdge[order(SevEdge[,1]),]

colnames(SevEdge)=c('source', 'target', 'value')
d3ForceNetwork(Links = as.data.frame(SevLinks), Nodes = as.data.frame(SevNodes),
               Source = "source", Target = "target",
               NodeID = "name", Group = "group", width = 1000, height = 1000,
               opacity = 0.9, file="sev.html")






















getForceNetwork=function(edgelist){
  temp= unique(unlist(edgelist))  
  MisNodes=data.frame(name=temp, group=c(seq(1,length(unique(edgelist[,1])),by=1), rep(90, length(temp) - length(unique(edgelist[,1])))))
  
  MisLinks=edgelist
  colnames(MisLinks) = c("source", "target")
  d3ForceNetwork(Links=Mislinks, Nodes=MisNodes, Source='source', Target='target', nodeId="name", group="group", width=700, height=600, zoom=TRUE, file="out.html")
}
#getForceNetwork(test)




















site2=paste("https://api.spotify.com/v1/artists/",relatedID,"/related-artists", sep='')
testJSON2=list(); relatedNames=list(); relatedIDs=list()
for(i in 1:length(site2)){
  testJSON2[[i]] = as.data.frame(fromJSON(getURL(site2[i], httpheader = c(Accept = "application/json"))))
  relatedNames[[i]]=testJSON2[[i]][,7]
  relatedIDs[[i]]=matrix(unlist(strsplit(testJSON2[[i]][,10], ":")), byrow=TRUE,ncol=3)[,3]
}



